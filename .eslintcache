[{"D:\\work_profession_developer\\sort_visual\\sort_visual\\src\\index.js":"1","D:\\work_profession_developer\\sort_visual\\sort_visual\\src\\reportWebVitals.js":"2","D:\\work_profession_developer\\sort_visual\\sort_visual\\src\\App.js":"3","D:\\work_profession_developer\\sort_visual\\sort_visual\\src\\Comps\\Dashboard.js":"4","D:\\work_profession_developer\\sort_visual\\sort_visual\\src\\Comps\\RenderArray.js":"5","D:\\work_profession_developer\\sort_visual\\sort_visual\\src\\Comps\\SortBubble.js":"6"},{"size":263,"mtime":1608945375830,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"8"},{"size":592,"mtime":1608940608590,"results":"10","hashOfConfig":"8"},{"size":3266,"mtime":1609121113116,"results":"11","hashOfConfig":"8"},{"size":4021,"mtime":1609185174754,"results":"12","hashOfConfig":"8"},{"size":4799,"mtime":1609262469591,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"totuff",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},"D:\\work_profession_developer\\sort_visual\\sort_visual\\src\\index.js",[],["30","31"],"D:\\work_profession_developer\\sort_visual\\sort_visual\\src\\reportWebVitals.js",[],"D:\\work_profession_developer\\sort_visual\\sort_visual\\src\\App.js",["32"],"import React, { useEffect, useState } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Dashboard from '../src/Comps/Dashboard';\n\nfunction App() {\n  let [force, setforce] = useState(0);\n  useEffect(() => {\n    window.addEventListener('resize', forceRender);\n    return () => { window.removeEventListener('resize', forceRender) }\n  }, [])\n\n  const forceRender = () => {\n    setforce(force => force + 1);\n  }\n\n  return (\n    <div className='body'>\n      <Switch>\n        <Route exact path='/' component={Dashboard} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","D:\\work_profession_developer\\sort_visual\\sort_visual\\src\\Comps\\Dashboard.js",[],"D:\\work_profession_developer\\sort_visual\\sort_visual\\src\\Comps\\RenderArray.js",["33","34"],"import { Button } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport '../CSS/dashboard.css';\r\n\r\n\r\nexport default function RenderArray(props) {\r\n    const [array, setarray] = useState([]);\r\n\r\n    useEffect(() => {\r\n        renderBasic();\r\n    }, [])\r\n\r\n\r\n    useEffect(() => {\r\n        renderBasic();\r\n    }, [props.size])\r\n\r\n\r\n\r\n    const renderBasic = () => {\r\n\r\n        if (!localStorage.getItem('arraySize')) {\r\n            let size = props.size;\r\n            let arr = [], count = 0, obj = {};\r\n            while (true) {\r\n                let number = Math.floor(Math.random() * 50) + 1;\r\n                count++;\r\n                obj.value = number;\r\n                obj.id = (count - 1);\r\n                let newobj = {};\r\n                newobj = { ...obj };\r\n                arr = [...arr, newobj];\r\n                if (count === size)\r\n                    break;\r\n            }\r\n            localStorage.setItem('array', JSON.stringify(arr));\r\n            localStorage.setItem('arraySize', Number(props.size));\r\n            setarray(arr);\r\n        }\r\n        else {\r\n            if (Number(localStorage.getItem('arraySize')) === props.size) {\r\n                let res = [];\r\n                res = JSON.parse(localStorage.getItem('array'));\r\n                res = res.map(item => (item))\r\n                localStorage.setItem('array', JSON.stringify(res));\r\n                localStorage.setItem('arraySize', Number(props.size));\r\n                setarray(res);\r\n            }\r\n            if (Number(localStorage.getItem('arraySize')) < props.size) {\r\n                let size = props.size - localStorage.getItem('arraySize');\r\n                let arr = [], count = (props.size - size), obj = {};\r\n                while (true) {\r\n                    let number = Math.floor(Math.random() * 50) + 1;\r\n                    count++;\r\n                    obj.value = number;\r\n                    obj.id = (count - 1);\r\n                    let newobj = {};\r\n                    newobj = { ...obj };\r\n                    arr = [...arr, newobj];\r\n                    if (count === props.size)\r\n                        break;\r\n                }\r\n                let res = [];\r\n                res = JSON.parse(localStorage.getItem('array'));\r\n                res = res.map(item => (item))\r\n                res = [...res, ...arr];\r\n                localStorage.setItem('array', JSON.stringify(res));\r\n                localStorage.setItem('arraySize', Number(props.size));\r\n                setarray(res);\r\n            }\r\n            if (Number(localStorage.getItem('arraySize')) > props.size) {\r\n                let deduction = localStorage.getItem('arraySize') - props.size;\r\n                let res = [];\r\n                res = JSON.parse(localStorage.getItem('array'));\r\n                res = res.map(item => (item));\r\n                let arr = [], count = 0;\r\n                for (let i = 0; i < res.length; i++) {\r\n                    arr = [...arr, res[i]];\r\n                    count++;\r\n                    if (count === (res.length - deduction))\r\n                        break;\r\n                }\r\n                localStorage.setItem('array', JSON.stringify(arr));\r\n                localStorage.setItem('arraySize', Number(props.size));\r\n                setarray(arr);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <br />\r\n            <br />\r\n            {\r\n                array &&\r\n                <Button className='generateBtn' onClick={() => {\r\n                    localStorage.removeItem('arraySize');\r\n                    renderBasic();\r\n                }}>\r\n                    Generate Different Array\r\n                </Button>\r\n            }\r\n            <div className='flexRow baseline'>\r\n                {array && array.map(item =>\r\n                    <p key={item.id} id={item.id} style={{ height: (item.value * 10) + 'px' }} className='paper' >{item.value}</p>\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}","D:\\work_profession_developer\\sort_visual\\sort_visual\\src\\Comps\\SortBubble.js",["35","36"],"import { Typography } from '@material-ui/core';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport '../CSS/dashboard.css';\r\nimport '../CSS/sorting.css';\r\n\r\nexport default function SortBubble(props) {\r\n    const [array, setarray] = useState([]);\r\n    const [sorting, setsorting] = useState(false);\r\n    const [processedArray, setprocessedArray] = useState([]);\r\n    const [hasStarted, sethasStarted] = useState(false)\r\n    const [finished, setfinished] = useState(false);\r\n    const unsorted = useRef();\r\n    const timer = useRef();\r\n\r\n    useEffect(() => {\r\n        let ObjectArray = props.array;\r\n        setarray(ObjectArray)\r\n        setTimeout(() => {\r\n            setsorting(true)\r\n        }, 1000);\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (array)\r\n            unsorted.current = array;\r\n    }, [array])\r\n\r\n\r\n    useEffect(() => {\r\n        if (sorting) {\r\n            timer.current = setInterval(() => {\r\n                swapper();\r\n            }, 150);\r\n        }\r\n        return () => {\r\n            clearInterval(timer.current);\r\n        }\r\n\r\n\r\n    }, [sorting])\r\n\r\n    const swapper = () => {\r\n        let i, j, res = [], temp, swap = false;\r\n        res = processedArray.length > 0 ? processedArray : [...unsorted.current];\r\n        for (i = 0; i < res.length; i++) {\r\n            for (j = i + 1; j < res.length; j++) {\r\n\r\n                if (res[i].value > res[j].value) {\r\n\r\n                    temp = res[i].value;\r\n                    res[i].value = res[j].value;\r\n                    res[j].value = temp;\r\n                    swap = true;\r\n\r\n                    let el = document.querySelector(\"p[id=\" + CSS.escape(i) + \"]\");\r\n                    let elm = document.querySelector(\"p[id=\" + CSS.escape(j) + \"]\");\r\n                    if (el && elm) {\r\n                        el.style.backgroundColor = \"#FEDB5E\";\r\n                        elm.style.backgroundColor = \"#e88d14\";\r\n                    }\r\n                }\r\n                //renewing array after each swap and storing it in state for re-rendering purpose\r\n                setprocessedArray(res)\r\n                sethasStarted(true)\r\n                //breaking away from inner loop after any swap on initial/renewed array\r\n                if (swap)\r\n                    break;\r\n            }\r\n            //breaking away from outer loop after any swap on initial/renewed array\r\n            if (swap)\r\n                break;\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (processedArray.length === unsorted.current.length && !finished) {\r\n            let checkArray = [...unsorted.current];\r\n            let values_from_ref = checkArray.map(item => item.value);\r\n            values_from_ref.sort(function (a, b) { return (a - b) });\r\n            let values_from_processedArray = processedArray.map(item => item.value);\r\n            let counter = 0;\r\n            for (let i = 0; i < values_from_ref.length; i++) {\r\n                if (values_from_ref[i] === values_from_processedArray[i])\r\n                    counter++;\r\n            }\r\n            if (counter === checkArray.length && counter > 0) {\r\n                clearInterval(timer.current);\r\n                setfinished(true)\r\n            }\r\n        }\r\n        if (finished) {\r\n            let el = document.querySelectorAll(\"p[class='paper_sort']\");\r\n            if (el) {\r\n                for (let i = 0; i < el.length; i++)\r\n                    el[i].style.backgroundColor = '#008085';\r\n            }\r\n        }\r\n    }, [processedArray, finished])\r\n\r\n    return (\r\n        <div>\r\n            <br />\r\n            <br />\r\n            <div className='flexRow baseline'>\r\n\r\n                {array && !sorting && array.map(item =>\r\n                    <p key={item.id} id={item.id} style={{ height: (item.value * 10) + 'px' }} className='paper' >{item.value}</p>\r\n                )}\r\n\r\n                {/* Sorting section below */}\r\n\r\n                {\r\n                    array && sorting && !hasStarted &&\r\n                    array.map(item =>\r\n                        <p key={item.id} id={item.id} style={{ height: (item.value * 10) + 'px' }} className='paper_sort' >{item.value}</p>\r\n                    )\r\n                }\r\n                {\r\n                    processedArray.length > 0 && sorting && hasStarted &&\r\n                    processedArray.map(item =>\r\n                        <p key={item.id} id={item.id} style={{ height: (item.value * 10) + 'px' }} className='paper_sort' >{item.value}</p>\r\n                    )\r\n                }\r\n            </div>\r\n            <br />\r\n            <div className='flexRow'>\r\n                <Typography className='textTypo'>\r\n                    Visualization of&nbsp;{props.type}&nbsp;Sorting\r\n                </Typography>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}",{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":6,"column":8,"nodeType":"43","messageId":"44","endLine":6,"endColumn":13},{"ruleId":"45","severity":1,"message":"46","line":11,"column":8,"nodeType":"47","endLine":11,"endColumn":10,"suggestions":"48"},{"ruleId":"45","severity":1,"message":"46","line":16,"column":8,"nodeType":"47","endLine":16,"endColumn":20,"suggestions":"49"},{"ruleId":"45","severity":1,"message":"50","line":21,"column":8,"nodeType":"47","endLine":21,"endColumn":10,"suggestions":"51"},{"ruleId":"45","severity":1,"message":"52","line":40,"column":8,"nodeType":"47","endLine":40,"endColumn":17,"suggestions":"53"},"no-native-reassign",["54"],"no-negated-in-lhs",["55"],"no-unused-vars","'force' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'renderBasic'. Either include it or remove the dependency array.","ArrayExpression",["56"],["57"],"React Hook useEffect has a missing dependency: 'props.array'. Either include it or remove the dependency array.",["58"],"React Hook useEffect has a missing dependency: 'swapper'. Either include it or remove the dependency array.",["59"],"no-global-assign","no-unsafe-negation",{"desc":"60","fix":"61"},{"desc":"62","fix":"63"},{"desc":"64","fix":"65"},{"desc":"66","fix":"67"},"Update the dependencies array to be: [renderBasic]",{"range":"68","text":"69"},"Update the dependencies array to be: [props.size, renderBasic]",{"range":"70","text":"71"},"Update the dependencies array to be: [props.array]",{"range":"72","text":"73"},"Update the dependencies array to be: [sorting, swapper]",{"range":"74","text":"75"},[281,283],"[renderBasic]",[344,356],"[props.size, renderBasic]",[731,733],"[props.array]",[1087,1096],"[sorting, swapper]"]